from DSOServer.compression import RLECompress, RLEUncompress


def test_uncompress():
    data_in = bytes([0x4, 0x64, 0x73, 0x49, 0x4e, 0x1, 0xfe, 0x4, 0x1, 0x1, 0x1, 0x1, 0xa, 0xfe, 0xa, 0x35, 0x37, 0x30, 0x38, 0x38, 0x30, 0x31, 0x36, 0x34, 0x0, 0x1, 0xfe, 0x0, 0xa, 0xfe, 0x8, 0x35, 0x37, 0x30, 0x38, 0x38, 0x30, 0x31, 0x36, 0x34, 0xfc, 0x0, 0x1, 0xf9, 0x0, 0x1, 0xf9, 0x0, 0x1, 0xfd, 0x0, 0x1, 0xfe])
    data_out = bytes([0x64, 0x73, 0x49, 0x4e, 0x1, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0xa, 0x0, 0x0, 0x0, 0x35, 0x37, 0x30, 0x38, 0x38, 0x30, 0x31, 0x36, 0x34, 0x0, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x35, 0x37, 0x30, 0x38, 0x38, 0x30, 0x31, 0x36, 0x34, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0])

    assert RLEUncompress(data_in) == data_out


def test_compress():
    # some corner cases
    assert RLECompress(bytes()) == bytes()
    assert RLECompress(bytes([0])) == bytes([0, 0])
    assert RLECompress(bytes([0, 0])) == bytes([0xff])
    assert RLECompress(bytes([0 for i in range(129)])) == bytes([0x80])
    assert RLECompress(bytes([0 for i in range(130)])) == bytes([0x80, 0, 0])
    assert RLECompress(bytes([1])) == bytes([0, 1])
    assert RLECompress(bytes([1, 0])) == bytes([1, 1, 0])
    assert RLECompress(bytes([i for i in range(128)])) == bytes([0x7f] + [i for i in range(128)])
    assert RLECompress(bytes([i for i in range(130)])) == bytes([0x7f] + [i for i in range(128)] + [1, 0x80, 0x81])
    assert RLECompress(bytes([1, 2, 3, 0, 0, 0, 4, 5, 6])) == bytes([2, 1, 2, 3, 0xfe, 2, 4, 5, 6])
    assert RLECompress(bytes([1, 2, 3, 0, 4, 0, 0, 5, 6])) == bytes([4, 1, 2, 3, 0, 4, 0xff, 1, 5, 6])


def test_reversible():
    data_in = bytes([0x64, 0x73, 0x49, 0x4e, 0x1, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0xa, 0x0, 0x0, 0x0, 0x35, 0x37, 0x30, 0x38, 0x38, 0x30, 0x31, 0x36, 0x34, 0x0, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x35, 0x37, 0x30, 0x38, 0x38, 0x30, 0x31, 0x36, 0x34, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0])

    assert RLEUncompress(RLECompress(data_in)) == data_in
